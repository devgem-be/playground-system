/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Ceo } from "./Ceo";
import { CeoCountArgs } from "./CeoCountArgs";
import { CeoFindManyArgs } from "./CeoFindManyArgs";
import { CeoFindUniqueArgs } from "./CeoFindUniqueArgs";
import { CreateCeoArgs } from "./CreateCeoArgs";
import { UpdateCeoArgs } from "./UpdateCeoArgs";
import { DeleteCeoArgs } from "./DeleteCeoArgs";
import { Company } from "../../company/base/Company";
import { Person } from "../../person/base/Person";
import { CeoService } from "../ceo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Ceo)
export class CeoResolverBase {
  constructor(
    protected readonly service: CeoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Ceo",
    action: "read",
    possession: "any",
  })
  async _ceosMeta(
    @graphql.Args() args: CeoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Ceo])
  @nestAccessControl.UseRoles({
    resource: "Ceo",
    action: "read",
    possession: "any",
  })
  async ceos(@graphql.Args() args: CeoFindManyArgs): Promise<Ceo[]> {
    return this.service.ceos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Ceo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Ceo",
    action: "read",
    possession: "own",
  })
  async ceo(@graphql.Args() args: CeoFindUniqueArgs): Promise<Ceo | null> {
    const result = await this.service.ceo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ceo)
  @nestAccessControl.UseRoles({
    resource: "Ceo",
    action: "create",
    possession: "any",
  })
  async createCeo(@graphql.Args() args: CreateCeoArgs): Promise<Ceo> {
    return await this.service.createCeo({
      ...args,
      data: {
        ...args.data,

        company: {
          connect: args.data.company,
        },

        person: {
          connect: args.data.person,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ceo)
  @nestAccessControl.UseRoles({
    resource: "Ceo",
    action: "update",
    possession: "any",
  })
  async updateCeo(@graphql.Args() args: UpdateCeoArgs): Promise<Ceo | null> {
    try {
      return await this.service.updateCeo({
        ...args,
        data: {
          ...args.data,

          company: {
            connect: args.data.company,
          },

          person: {
            connect: args.data.person,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ceo)
  @nestAccessControl.UseRoles({
    resource: "Ceo",
    action: "delete",
    possession: "any",
  })
  async deleteCeo(@graphql.Args() args: DeleteCeoArgs): Promise<Ceo | null> {
    try {
      return await this.service.deleteCeo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Company, {
    nullable: true,
    name: "company",
  })
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "read",
    possession: "any",
  })
  async getCompany(@graphql.Parent() parent: Ceo): Promise<Company | null> {
    const result = await this.service.getCompany(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Person, {
    nullable: true,
    name: "person",
  })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "any",
  })
  async getPerson(@graphql.Parent() parent: Ceo): Promise<Person | null> {
    const result = await this.service.getPerson(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
