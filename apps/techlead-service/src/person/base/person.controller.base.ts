/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PersonService } from "../person.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PersonCreateInput } from "./PersonCreateInput";
import { Person } from "./Person";
import { PersonFindManyArgs } from "./PersonFindManyArgs";
import { PersonWhereUniqueInput } from "./PersonWhereUniqueInput";
import { PersonUpdateInput } from "./PersonUpdateInput";
import { CeoFindManyArgs } from "../../ceo/base/CeoFindManyArgs";
import { Ceo } from "../../ceo/base/Ceo";
import { CeoWhereUniqueInput } from "../../ceo/base/CeoWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PersonControllerBase {
  constructor(
    protected readonly service: PersonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Person })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: PersonCreateInput,
  })
  async createPerson(@common.Body() data: PersonCreateInput): Promise<Person> {
    return await this.service.createPerson({
      data: data,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Person] })
  @ApiNestedQuery(PersonFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async people(@common.Req() request: Request): Promise<Person[]> {
    const args = plainToClass(PersonFindManyArgs, request.query);
    return this.service.people({
      ...args,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Person })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async person(
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<Person | null> {
    const result = await this.service.person({
      where: params,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Person })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: PersonUpdateInput,
  })
  async updatePerson(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() data: PersonUpdateInput
  ): Promise<Person | null> {
    try {
      return await this.service.updatePerson({
        where: params,
        data: data,
        select: {
          createdAt: true,
          firstName: true,
          id: true,
          lastName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Person })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePerson(
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<Person | null> {
    try {
      return await this.service.deletePerson({
        where: params,
        select: {
          createdAt: true,
          firstName: true,
          id: true,
          lastName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/ceos")
  @ApiNestedQuery(CeoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Ceo",
    action: "read",
    possession: "any",
  })
  async findCeos(
    @common.Req() request: Request,
    @common.Param() params: PersonWhereUniqueInput
  ): Promise<Ceo[]> {
    const query = plainToClass(CeoFindManyArgs, request.query);
    const results = await this.service.findCeos(params.id, {
      ...query,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        fromDate: true,
        id: true,

        person: {
          select: {
            id: true,
          },
        },

        untilDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ceos")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async connectCeos(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: CeoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ceos: {
        connect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ceos")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async updateCeos(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: CeoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ceos: {
        set: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ceos")
  @nestAccessControl.UseRoles({
    resource: "Person",
    action: "update",
    possession: "any",
  })
  async disconnectCeos(
    @common.Param() params: PersonWhereUniqueInput,
    @common.Body() body: CeoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ceos: {
        disconnect: body,
      },
    };
    await this.service.updatePerson({
      where: params,
      data,
      select: { id: true },
    });
  }
}
