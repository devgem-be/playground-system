/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Person as PrismaPerson,
  Ceo as PrismaCeo,
} from "@prisma/client";

export class PersonServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PersonCountArgs, "select">): Promise<number> {
    return this.prisma.person.count(args);
  }

  async people<T extends Prisma.PersonFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonFindManyArgs>
  ): Promise<PrismaPerson[]> {
    return this.prisma.person.findMany<Prisma.PersonFindManyArgs>(args);
  }
  async person<T extends Prisma.PersonFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonFindUniqueArgs>
  ): Promise<PrismaPerson | null> {
    return this.prisma.person.findUnique(args);
  }
  async createPerson<T extends Prisma.PersonCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonCreateArgs>
  ): Promise<PrismaPerson> {
    return this.prisma.person.create<T>(args);
  }
  async updatePerson<T extends Prisma.PersonUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonUpdateArgs>
  ): Promise<PrismaPerson> {
    return this.prisma.person.update<T>(args);
  }
  async deletePerson<T extends Prisma.PersonDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonDeleteArgs>
  ): Promise<PrismaPerson> {
    return this.prisma.person.delete(args);
  }

  async findCeos(
    parentId: string,
    args: Prisma.CeoFindManyArgs
  ): Promise<PrismaCeo[]> {
    return this.prisma.person
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ceos(args);
  }
}
