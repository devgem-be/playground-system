# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  addressLine1: String!
  addressLine2: String
  city: String!
  companies(orderBy: [CompanyOrderByInput!], skip: Float, take: Float, where: CompanyWhereInput): [Company!]!
  country: String!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  zipCode: String!
}

input AddressCreateInput {
  addressLine1: String!
  addressLine2: String
  city: String!
  companies: CompanyCreateNestedManyWithoutAddressesInput
  country: String!
  zipCode: String!
}

input AddressOrderByInput {
  addressLine1: SortOrder
  addressLine2: SortOrder
  city: SortOrder
  country: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  zipCode: SortOrder
}

input AddressUpdateInput {
  addressLine1: String
  addressLine2: String
  city: String
  companies: CompanyUpdateManyWithoutAddressesInput
  country: String
  zipCode: String
}

input AddressWhereInput {
  addressLine1: StringFilter
  addressLine2: StringNullableFilter
  city: StringFilter
  companies: CompanyListRelationFilter
  country: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  zipCode: StringFilter
}

input AddressWhereUniqueInput {
  id: String!
}

type Ceo {
  company: Company
  createdAt: DateTime!
  fromDate: DateTime!
  id: String!
  person: Person
  untilDate: DateTime
  updatedAt: DateTime!
}

input CeoCreateInput {
  company: CompanyWhereUniqueInput!
  fromDate: DateTime!
  person: PersonWhereUniqueInput!
  untilDate: DateTime
}

input CeoCreateNestedManyWithoutCompaniesInput {
  connect: [CeoWhereUniqueInput!]
}

input CeoCreateNestedManyWithoutPeopleInput {
  connect: [CeoWhereUniqueInput!]
}

input CeoListRelationFilter {
  every: CeoWhereInput
  none: CeoWhereInput
  some: CeoWhereInput
}

input CeoOrderByInput {
  companyId: SortOrder
  createdAt: SortOrder
  fromDate: SortOrder
  id: SortOrder
  personId: SortOrder
  untilDate: SortOrder
  updatedAt: SortOrder
}

input CeoUpdateInput {
  company: CompanyWhereUniqueInput
  fromDate: DateTime
  person: PersonWhereUniqueInput
  untilDate: DateTime
}

input CeoUpdateManyWithoutCompaniesInput {
  connect: [CeoWhereUniqueInput!]
  disconnect: [CeoWhereUniqueInput!]
  set: [CeoWhereUniqueInput!]
}

input CeoUpdateManyWithoutPeopleInput {
  connect: [CeoWhereUniqueInput!]
  disconnect: [CeoWhereUniqueInput!]
  set: [CeoWhereUniqueInput!]
}

input CeoWhereInput {
  company: CompanyWhereUniqueInput
  createdAt: DateTimeFilter
  fromDate: DateTimeFilter
  id: StringFilter
  person: PersonWhereUniqueInput
  untilDate: DateTimeNullableFilter
  updatedAt: DateTimeFilter
}

input CeoWhereUniqueInput {
  id: String!
}

type Company {
  address: Address
  ceos(orderBy: [CeoOrderByInput!], skip: Float, take: Float, where: CeoWhereInput): [Ceo!]!
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
}

input CompanyCreateInput {
  address: AddressWhereUniqueInput!
  ceos: CeoCreateNestedManyWithoutCompaniesInput
  name: String!
}

input CompanyCreateNestedManyWithoutAddressesInput {
  connect: [CompanyWhereUniqueInput!]
}

input CompanyListRelationFilter {
  every: CompanyWhereInput
  none: CompanyWhereInput
  some: CompanyWhereInput
}

input CompanyOrderByInput {
  addressId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CompanyUpdateInput {
  address: AddressWhereUniqueInput
  ceos: CeoUpdateManyWithoutCompaniesInput
  name: String
}

input CompanyUpdateManyWithoutAddressesInput {
  connect: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
}

input CompanyWhereInput {
  address: AddressWhereUniqueInput
  ceos: CeoListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input CompanyWhereUniqueInput {
  id: String!
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  createCeo(data: CeoCreateInput!): Ceo!
  createCompany(data: CompanyCreateInput!): Company!
  createPerson(data: PersonCreateInput!): Person!
  createUser(data: UserCreateInput!): User!
  deleteAddress(where: AddressWhereUniqueInput!): Address!
  deleteCeo(where: CeoWhereUniqueInput!): Ceo!
  deleteCompany(where: CompanyWhereUniqueInput!): Company!
  deletePerson(where: PersonWhereUniqueInput!): Person!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  updateCeo(data: CeoUpdateInput!, where: CeoWhereUniqueInput!): Ceo!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company!
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Person {
  ceos(orderBy: [CeoOrderByInput!], skip: Float, take: Float, where: CeoWhereInput): [Ceo!]!
  createdAt: DateTime!
  firstName: String!
  id: String!
  lastName: String!
  updatedAt: DateTime!
}

input PersonCreateInput {
  ceos: CeoCreateNestedManyWithoutPeopleInput
  firstName: String!
  lastName: String!
}

input PersonOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  updatedAt: SortOrder
}

input PersonUpdateInput {
  ceos: CeoUpdateManyWithoutPeopleInput
  firstName: String
  lastName: String
}

input PersonWhereInput {
  ceos: CeoListRelationFilter
  createdAt: DateTimeFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  updatedAt: DateTimeFilter
}

input PersonWhereUniqueInput {
  id: String!
}

type Query {
  _addressesMeta(where: AddressWhereInput): MetaQueryPayload!
  _ceosMeta(where: CeoWhereInput): MetaQueryPayload!
  _companiesMeta(where: CompanyWhereInput): MetaQueryPayload!
  _peopleMeta(where: PersonWhereInput): MetaQueryPayload!
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  address(where: AddressWhereUniqueInput!): Address
  addresses(orderBy: [AddressOrderByInput!], skip: Float, take: Float, where: AddressWhereInput): [Address!]!
  ceo(where: CeoWhereUniqueInput!): Ceo
  ceos(orderBy: [CeoOrderByInput!], skip: Float, take: Float, where: CeoWhereInput): [Ceo!]!
  companies(orderBy: [CompanyOrderByInput!], skip: Float, take: Float, where: CompanyWhereInput): [Company!]!
  company(where: CompanyWhereUniqueInput!): Company
  people(orderBy: [PersonOrderByInput!], skip: Float, take: Float, where: PersonWhereInput): [Person!]!
  person(where: PersonWhereUniqueInput!): Person
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  email: String
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  email: String
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  email: StringNullableFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}